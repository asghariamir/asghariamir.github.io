<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Logistic Map Fractal Dimension Explorer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.2/p5.min.js"></script>
  <style>
    body { font-family: sans-serif; background: #f4f4f4; }
    #controls { margin: 1em 0; }
    label { margin-right: 1em; }
    canvas { border: 1px solid #999; display: block; margin-bottom: 1em; }
    #loglog { background: #fff; }
  </style>
</head>
<body>
  <h2>Logistic Map Fractal Dimension Explorer (Box-Counting)</h2>
  <div id="controls">
    <label>r: <input type="range" id="rSlider" min="3.5" max="4" step="0.001" value="3.9"/> <span id="rValue">3.9</span></label>
    <label>Boxes (N): <input type="range" id="boxSlider" min="10" max="200" step="1" value="50"/> <span id="boxValue">50</span></label>
    <button id="addPoint">Add Data Point</button>
    <button id="clearData">Clear Data</button>
  </div>
  <main>
    <div>
      <canvas id="logmap"></canvas>
      <canvas id="loglog" width="400" height="300"></canvas>
    </div>
  </main>
  <p>
    <b>Instructions:</b> Adjust <code>r</code> for the logistic map. Change the box size (N), then press <b>Add Data Point</b> to collect (<code>N</code>, <code>Number of occupied boxes</code>). As you collect data for different box sizes, the lower plot shows the log-log plot and the estimated fractal dimension as the slope.
  </p>
  <script>
    // Parameters
    let r = 3.9;
    let x0 = 0.2;
    let iterations = 2000, skip = 200;
    let points = [];
    let boxCount = 50;
    let boxData = []; // stores {N, occupied, eps}

    // --- Setup Controls ---
    const rSlider = document.getElementById('rSlider');
    const rValue = document.getElementById('rValue');
    rSlider.oninput = function() {
      r = parseFloat(rSlider.value);
      rValue.textContent = r.toFixed(3);
      generateLogisticMap();
      redrawMain();
    };

    const boxSlider = document.getElementById('boxSlider');
    const boxValue = document.getElementById('boxValue');
    boxSlider.oninput = function() {
      boxCount = parseInt(boxSlider.value);
      boxValue.textContent = boxCount;
      redrawMain();
    };

    document.getElementById('addPoint').onclick = function() {
      let N = boxCount;
      let {nOccupied, eps} = countBoxes(N);
      boxData.push({N, nOccupied, eps});
      drawLogLogPlot();
    };

    document.getElementById('clearData').onclick = function() {
      boxData = [];
      drawLogLogPlot();
    };

    // --- Logistic Map Data Generation ---
    function generateLogisticMap() {
      let x = x0;
      points = [];
      for (let i = 0; i < iterations + skip; i++) {
        x = r * x * (1 - x);
        if (i >= skip) points.push(x);
      }
    }

    // --- Box Counting Logic ---
    function countBoxes(N) {
      let occupied = new Array(N).fill(false);
      points.forEach(x => {
        let box = Math.floor(x * N);
        if (box >= 0 && box < N) occupied[box] = true;
      });
      let nOccupied = occupied.filter(b => b).length;
      let eps = 1.0 / N;
      return {nOccupied, eps, occupied};
    }

    // --- Drawing Functions ---
    function redrawMain() {
      drawMap();
      drawLogLogPlot();
    }

    function drawMap() {
      const c = document.getElementById('logmap');
      c.width = 600; c.height = 200;
      const ctx = c.getContext('2d');
      ctx.clearRect(0,0,c.width,c.height);
      // Draw axes
      ctx.strokeStyle = "#bbb";
      ctx.beginPath();
      ctx.moveTo(40,0); ctx.lineTo(40,c.height);
      ctx.moveTo(0,c.height-30); ctx.lineTo(c.width,c.height-30);
      ctx.stroke();

      // Draw logistic map points
      ctx.fillStyle = "#1976d2";
      points.forEach(x => {
        // Map x in [0,1] to pixel X in [40, c.width-10]
        let px = 40 + x * (c.width-50);
        let py = c.height-30 - x * (c.height-40); // y=x (identity, just for visual)
        ctx.fillRect(px, py, 1, 1);
      });

      // Overlay grid and highlight occupied
      let N = boxCount;
      let {occupied} = countBoxes(N);
      let boxW = (c.width-50)/N;
      for (let i=0;i<N;i++) {
        ctx.beginPath();
        ctx.rect(40+i*boxW,10,boxW,c.height-40);
        ctx.strokeStyle = "#ccc";
        ctx.stroke();
        if (occupied[i]) {
          ctx.fillStyle = "rgba(255,0,0,0.15)";
          ctx.fillRect(40+i*boxW,10,boxW,c.height-40);
        }
      }

      // Axis labels
      ctx.fillStyle="#222";
      ctx.font="12px sans-serif";
      ctx.fillText("0",32,c.height-25);
      ctx.fillText("1",c.width-15,c.height-25);
      ctx.fillText("x",c.width/2-5,c.height-10);
      ctx.fillText("Logistic Map Attractor",c.width/2-65,20);
    }

    function drawLogLogPlot() {
      const c = document.getElementById('loglog');
      const ctx = c.getContext('2d');
      ctx.clearRect(0,0,c.width,c.height);
      // Draw axes
      ctx.strokeStyle = "#bbb";
      ctx.beginPath();
      ctx.moveTo(40,10); ctx.lineTo(40,c.height-40);
      ctx.lineTo(c.width-10,c.height-40);
      ctx.stroke();

      // Axis labels
      ctx.fillStyle="#222";
      ctx.font="12px sans-serif";
      ctx.fillText("log(1/ε)",c.width/2-30,c.height-10);
      ctx.save();
      ctx.translate(15,c.height/2+20);
      ctx.rotate(-Math.PI/2);
      ctx.fillText("log N(ε)",0,0);
      ctx.restore();

      // Draw points
      if (boxData.length > 0) {
        let logs = boxData.map(d => ({
          x: Math.log(1/d.eps),
          y: Math.log(d.nOccupied)
        }));
        let xs = logs.map(p=>p.x), ys = logs.map(p=>p.y);
        let minx=Math.min(...xs),maxx=Math.max(...xs);
        let miny=Math.min(...ys),maxy=Math.max(...ys);

        // Draw data points
        logs.forEach(p => {
          let px = 40 + ((p.x - minx) / (maxx - minx + 1e-6)) * (c.width-60);
          let py = c.height-40 - ((p.y - miny) / (maxy - miny + 1e-6)) * (c.height-60);
          ctx.beginPath();
          ctx.arc(px, py, 5, 0, 2 * Math.PI);
          ctx.fillStyle = "#d32f2f";
          ctx.fill();
        });

        // Fit line (fractal dimension estimate)
        if (boxData.length >= 2) {
          let n = logs.length;
          let sumx = logs.reduce((a,b)=>a+b.x,0), sumy=logs.reduce((a,b)=>a+b.y,0);
          let sumxx = logs.reduce((a,b)=>a+b.x*b.x,0), sumxy=logs.reduce((a,b)=>a+b.x*b.y,0);
          let m = (n*sumxy - sumx*sumy) / (n*sumxx - sumx*sumx);
          let b = (sumy - m*sumx)/n;

          // Draw fitted line
          let x1 = minx, x2 = maxx;
          let y1 = m*x1 + b, y2 = m*x2 + b;
          let px1 = 40 + ((x1-minx)/(maxx-minx+1e-6))*(c.width-60);
          let py1 = c.height-40 - ((y1-miny)/(maxy-miny+1e-6))*(c.height-60);
          let px2 = 40 + ((x2-minx)/(maxx-minx+1e-6))*(c.width-60);
          let py2 = c.height-40 - ((y2-miny)/(maxy-miny+1e-6))*(c.height-60);
          ctx.beginPath();
          ctx.moveTo(px1,py1);
          ctx.lineTo(px2,py2);
          ctx.strokeStyle="#388e3c";
          ctx.lineWidth=2;
          ctx.stroke();
          ctx.lineWidth=1;

          ctx.fillStyle="#388e3c";
          ctx.fillText("Slope ≈ "+(-m).toFixed(3),c.width/2-30,25);
        }
      }

      ctx.fillStyle="#222";
      ctx.font="13px sans-serif";
      ctx.fillText("Log-Log Plot: Box-Counting Dimension",c.width/2-100,20);
    }

    // --- Main ---
    function setupPage() {
      generateLogisticMap();
      redrawMain();
    }
    setupPage();
  </script>
</body>
</html>

