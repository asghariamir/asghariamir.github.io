<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title> (JS)</title>
  <!-- Include Plotly.js from CDN -->
  <script src="https://cdn.plot.ly/plotly-2.30.0.min.js"></script>
  <style>
    /* =======================
       Global Styles
       ======================= */
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background: #f5f5f5;
      color: #333;
      text-align: center;
    }
    h1 {
      margin-bottom: 5px;
    }
    p {
      margin-top: 0;
      margin-bottom: 20px;
      color: #555;
    }
    h2, h3 {
      margin: 20px 0 10px;
      color: #333;
    }

    /* =======================
       Tab Styles
       ======================= */
    .tabs {
      display: flex;
      justify-content: center;
      border-bottom: 2px solid #ccc;
      margin-bottom: 10px;
      background-color: #fff;
      padding: 5px 0;
    }
    .tab-button {
      padding: 10px 20px;
      cursor: pointer;
      border: 1px solid #ccc;
      border-bottom: none;
      background-color: #ddd;
      color: #000;
      font-size: 16px;
      margin: 0 5px;
      border-radius: 5px 5px 0 0;
      transition: background-color 0.2s, color 0.2s;
    }
    .tab-button:hover {
      background-color: #ccc;
    }
    .tab-button.active {
      background-color: #007bff;
      color: #fff;
      border-color: #007bff;
      font-weight: bold;
    }
    .tab-content {
      display: none;
      background-color: #fff;
      padding: 20px;
      border: 1px solid #ccc;
      border-top: none;
      border-radius: 0 5px 5px 5px;
      max-width: 900px;
      margin: 0 auto 30px;
    }
    .tab-content.active {
      display: block;
    }

    /* =======================
       Layout Helpers
       ======================= */
    .row {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      gap: 20px;
      margin-top: 10px;
      flex-wrap: wrap;
    }
    .column {
      flex: 1;
      min-width: 280px;
      box-sizing: border-box;
    }
    .column.half {
      flex: 0 0 45%;
      box-sizing: border-box;
    }
    .control-group {
      margin-bottom: 12px;
      text-align: center;
    }
    .control-group label {
      display: block;
      margin-bottom: 6px;
      font-weight: bold;
      color: #444;
    }
    .control-group input[type="range"],
    .control-group input[type="number"] {
      width: 100%;
      margin: 0 auto;
    }
    .control-group output {
      display: block;
      margin-top: 4px;
      font-weight: bold;
      color: #555;
    }
    button {
      padding: 8px 16px;
      font-size: 14px;
      cursor: pointer;
      margin-top: 8px;
      background-color: #007bff;
      border: none;
      color: #fff;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    button:hover {
      background-color: #0056b3;
    }
    .plot-container {
      width: 100%;
      height: 400px;
      background: #fafafa;
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 5px;
      box-sizing: border-box;
      margin: 0 auto;
    }
    /* =======================
       Limit/Periodic Output Box
       ======================= */
    #limitOutput {
      border: 1px solid #ccc;
      background-color: #fafafa;
      padding: 10px;
      border-radius: 5px;
      font-size: 14px;
      color: #222;
      min-height: 40px;
      margin: 10px auto;
      max-width: 400px;
      text-align: center;
    }
    /* =======================
       Bifurcation Tab Styles
       ======================= */
    .bif-controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }
    .bif-controls .control-group {
      flex: 0 0 200px;
      text-align: center;
    }
  </style>
</head>
<body>
  <h1></h1>
    <!-- Tabs -->
  <div class="tabs">
    <button class="tab-button active" data-tab="explorerTab">Explorer</button>
    <button class="tab-button" data-tab="bifurcationTab">Bifurcation Diagram Explorer</button>
  </div>

  <!-- Explorer Tab Content -->
  <div id="explorerTab" class="tab-content active">
    <!-- Sequence Explorer & Sequence Plot Side by Side -->
    <h2>Sequence Explorer</h2>
    <div class="row">
      <!-- Controls Column -->
      <div class="column half">
        <div class="control-group">
          <label for="rSlider">Growth rate r</label>
          <input
            type="range"
            id="rSlider"
            min="0"
            max="4"
            step="0.0001"
            value="3.4"
          />
          <output id="rValue">3.4000</output>
        </div>

        <div class="control-group">
          <label for="x0Slider">Initial x₀</label>
          <input
            type="range"
            id="x0Slider"
            min="0"
            max="1"
            step="0.0001"
            value="0.5"
          />
          <output id="x0Value">0.5000</output>
        </div>

        <div class="control-group">
          <label for="nIterInput">Iterations</label>
          <input type="number" id="nIterInput" value="200" min="1" step="1" />
        </div>

        <button id="computeBtn">Compute Sequence</button>

        <div>
          <div id="limitOutput"></div>
        </div>
      </div>

      <!-- Sequence Plot Column -->
      <div class="column half">
        <h3>Sequence Plot</h3>
        <div id="seqPlot" class="plot-container"></div>
      </div>
    </div>

    <!-- Partial Bifurcation Plot -->
    <h2 style="margin-top: 30px;">Partial Bifurcation (0 ≤ r ≤ selected r)</h2>
    <div id="partialBifPlot" class="plot-container"></div>
  </div>

  <!-- Bifurcation Tab Content -->
  <div id="bifurcationTab" class="tab-content">
    <h2>Full Bifurcation Diagram Explorer</h2>
    <div class="bif-controls">
      <div class="control-group">
        <label for="resRInput">Resolution (# of r samples)</label>
        <input
          type="range"
          id="resRInput"
          min="100"
          max="2000"
          step="100"
          value="600"
        />
        <output id="resRValue">600</output>
      </div>

      <div class="control-group">
        <label for="resIterInput">Iterations per r</label>
        <input
          type="range"
          id="resIterInput"
          min="100"
          max="2000"
          step="100"
          value="400"
        />
        <output id="resIterValue">400</output>
      </div>

      <div class="control-group">
        <label for="lastNInput">Last points to plot (per r)</label>
        <input
          type="range"
          id="lastNInput"
          min="20"
          max="300"
          step="10"
          value="100"
        />
        <output id="lastNValue">100</output>
      </div>
    </div>

    <button id="generateBifBtn" style="margin-top: 20px;">Generate Diagram</button>

    <div style="margin-top: 20px;">
      <div id="bifPlot" class="plot-container"></div>
    </div>
  </div>

  <script>
    // =======================
    // Utility Functions
    // =======================
    function logisticIterate(r, x0, n) {
      const xs = new Array(n + 1);
      xs[0] = x0;
      for (let i = 0; i < n; i++) {
        xs[i + 1] = r * xs[i] * (1 - xs[i]);
      }
      return xs;
    }

    function approximateLimit(series, window = 20, tol = 1e-6) {
      const length = series.length;
      if (length < window * 2) return null;
      const tail = series.slice(length - window);
      const meanTail = tail.reduce((acc, v) => acc + v, 0) / window;
      let maxDev = 0;
      for (let val of tail) {
        const dev = Math.abs(val - meanTail);
        if (dev > maxDev) maxDev = dev;
      }
      if (maxDev < tol) {
        return meanTail;
      }
      for (let p = 2; p <= 4; p++) {
        let isPeriodic = true;
        for (let k = 0; k < p; k++) {
          const a = tail[window - p + k];
          const b = tail[window - 2 * p + k];
          if (Math.abs(a - b) > tol) {
            isPeriodic = false;
            break;
          }
        }
        if (isPeriodic) {
          return tail.slice(window - p);
        }
      }
      return null;
    }

    function computePartialBifurcation(rCurrent, x0, nIter) {
      const resolution = 200;
      const rVals = [];
      for (let i = 0; i < resolution; i++) {
        rVals.push((rCurrent * i) / (resolution - 1));
      }
      const rPlot = [];
      const xPlot = [];
      for (let rv of rVals) {
        const xsTemp = logisticIterate(rv, x0, nIter);
        const lastN = Math.min(50, xsTemp.length);
        const tail = xsTemp.slice(xsTemp.length - lastN);
        for (let y of tail) {
          rPlot.push(rv);
          xPlot.push(y);
        }
      }
      return { r: rPlot, x: xPlot };
    }

    function computeFullBifurcation(resR, resIter, lastN) {
      const rVals = [];
      for (let i = 0; i < resR; i++) {
        rVals.push((4 * i) / (resR - 1));
      }
      const rPlot = [];
      const xPlot = [];
      for (let rv of rVals) {
        const xsTemp = logisticIterate(rv, 0.5, resIter);
        const tail = xsTemp.slice(xsTemp.length - lastN);
        for (let y of tail) {
          rPlot.push(rv);
          xPlot.push(y);
        }
      }
      return { r: rPlot, x: xPlot };
    }

    // =======================
    // Tab‐switching Logic
    // =======================
    document.querySelectorAll(".tab-button").forEach((btn) => {
      btn.addEventListener("click", () => {
        document.querySelectorAll(".tab-button").forEach((b) => b.classList.remove("active"));
        document.querySelectorAll(".tab-content").forEach((c) => c.classList.remove("active"));
        btn.classList.add("active");
        const target = btn.getAttribute("data-tab");
        document.getElementById(target).classList.add("active");
      });
    });

    // =======================
    // Explorer Tab Logic
    // =======================
    const rSlider = document.getElementById("rSlider");
    const x0Slider = document.getElementById("x0Slider");
    const nIterInput = document.getElementById("nIterInput");
    const computeBtn = document.getElementById("computeBtn");
    const seqPlotDiv = document.getElementById("seqPlot");
    const limitOutputDiv = document.getElementById("limitOutput");
    const partialBifDiv = document.getElementById("partialBifPlot");
    const rValueLabel = document.getElementById("rValue");
    const x0ValueLabel = document.getElementById("x0Value");

    // Update displayed slider values
    rSlider.addEventListener("input", () => {
      rValueLabel.value = parseFloat(rSlider.value).toFixed(4);
    });
    x0Slider.addEventListener("input", () => {
      x0ValueLabel.value = parseFloat(x0Slider.value).toFixed(4);
    });

    computeBtn.addEventListener("click", () => {
      const r = parseFloat(rSlider.value);
      const x0 = parseFloat(x0Slider.value);
      const nIter = parseInt(nIterInput.value);

      // 1) Compute logistic sequence
      const xs = logisticIterate(r, x0, nIter);
      const nArray = Array.from({ length: xs.length }, (_, i) => i);

      // 2) Plot the sequence (markers only)
      Plotly.newPlot(
        seqPlotDiv,
        [
          {
            x: nArray,
            y: xs,
            mode: "markers",
            marker: { color: "#007bff", size: 6 },
          },
        ],
        {
          title: "",
          margin: { t: 20, b: 40, l: 50, r: 20 },
          xaxis: { title: "n", tickcolor: "#ccc" },
          yaxis: { title: "xₙ", tickcolor: "#ccc" },
        },
        { responsive: true }
      );

      // 3) Compute approximate limit
      const lim = approximateLimit(xs);
      let limStr = "";
      if (lim === null) {
        limStr = "No fixed/periodic limit detected (chaotic or undecided)";
      } else if (Array.isArray(lim)) {
        limStr =
          "Periodic (period " +
          lim.length +
          "): [" +
          lim.map((v) => v.toFixed(5)).join(", ") +
          "]";
      } else {
        limStr = "Fixed-point ≈ " + lim.toFixed(6);
      }
      limitOutputDiv.textContent = limStr;

      // 4) Compute partial bifurcation
      const dataPB = computePartialBifurcation(r, x0, nIter);
      Plotly.newPlot(
        partialBifDiv,
        [
          {
            x: dataPB.r,
            y: dataPB.x,
            mode: "markers",
            marker: { size: 4, color: "rgba(0, 100, 200, 0.6)" },
          },
        ],
        {
          title: "",
          margin: { t: 20, b: 40, l: 50, r: 20 },
          xaxis: { title: "r", tickcolor: "#ccc" },
          yaxis: { title: "x", tickcolor: "#ccc" },
        },
        { responsive: true }
      );
    });

    // Initialize Box 1 & Box 2 on page load
    window.addEventListener("DOMContentLoaded", () => {
      computeBtn.click();
    });

    // =======================
    // Bifurcation Tab Logic
    // =======================
    const resRInput = document.getElementById("resRInput");
    const resIterInput = document.getElementById("resIterInput");
    const lastNInput = document.getElementById("lastNInput");
    const resRValue = document.getElementById("resRValue");
    const resIterValue = document.getElementById("resIterValue");
    const lastNValue = document.getElementById("lastNValue");
    const generateBifBtn = document.getElementById("generateBifBtn");
    const bifPlotDiv = document.getElementById("bifPlot");

    resRInput.addEventListener("input", () => {
      resRValue.value = resRInput.value;
    });
    resIterInput.addEventListener("input", () => {
      resIterValue.value = resIterInput.value;
    });
    lastNInput.addEventListener("input", () => {
      lastNValue.value = lastNInput.value;
    });

    generateBifBtn.addEventListener("click", () => {
      const resR = parseInt(resRInput.value);
      const resIter = parseInt(resIterInput.value);
      const lastN = parseInt(lastNInput.value);

      const dataFB = computeFullBifurcation(resR, resIter, lastN);
      Plotly.newPlot(
        bifPlotDiv,
        [
          {
            x: dataFB.r,
            y: dataFB.x,
            mode: "markers",
            marker: { size: 2, color: "rgba(200, 0, 100, 0.5)" },
          },
        ],
        {
          title: "",
          margin: { t: 20, b: 40, l: 50, r: 20 },
          xaxis: { title: "r", tickcolor: "#ccc" },
          yaxis: { title: "x", tickcolor: "#ccc" },
        },
        { responsive: true }
      );
    });

    // Initialize Box 3 on page load
    window.addEventListener("DOMContentLoaded", () => {
      generateBifBtn.click();
    });
  </script>
</body>
</html>